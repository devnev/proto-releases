// Code generated by protoc-gen-baseconvert. DO NOT EDIT.

package testdata

import (
	context "context"
	golden "github.com/devnev/proto-releases/testdata/golden"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func (m *EmptyMessageReleased) ToBase() *golden.EmptyMessageReleased {
	msg := &golden.EmptyMessageReleased{}
	return msg
}
func (m *EmptyMessageReleased) FromBase(b *golden.EmptyMessageReleased) {
	m.Reset()
}
func (m *EmptyMessagePreviewed) ToBase() *golden.EmptyMessagePreviewed {
	msg := &golden.EmptyMessagePreviewed{}
	return msg
}
func (m *EmptyMessagePreviewed) FromBase(b *golden.EmptyMessagePreviewed) {
	m.Reset()
}
func (m *EmptyMessagePreviewedThenReleased) ToBase() *golden.EmptyMessagePreviewedThenReleased {
	msg := &golden.EmptyMessagePreviewedThenReleased{}
	return msg
}
func (m *EmptyMessagePreviewedThenReleased) FromBase(b *golden.EmptyMessagePreviewedThenReleased) {
	m.Reset()
}
func (m *EmptyMessagePreviewedThenRemoved) ToBase() *golden.EmptyMessagePreviewedThenRemoved {
	msg := &golden.EmptyMessagePreviewedThenRemoved{}
	return msg
}
func (m *EmptyMessagePreviewedThenRemoved) FromBase(b *golden.EmptyMessagePreviewedThenRemoved) {
	m.Reset()
}
func (m *EmptyMessageReleasedThenRemoved) ToBase() *golden.EmptyMessageReleasedThenRemoved {
	msg := &golden.EmptyMessageReleasedThenRemoved{}
	return msg
}
func (m *EmptyMessageReleasedThenRemoved) FromBase(b *golden.EmptyMessageReleasedThenRemoved) {
	m.Reset()
}
func (m *MessageWithReleasedField) ToBase() *golden.MessageWithReleasedField {
	msg := &golden.MessageWithReleasedField{
		Released: m.GetReleased(),
	}
	return msg
}
func (m *MessageWithReleasedField) FromBase(b *golden.MessageWithReleasedField) {
	m.Reset()
	m.Released = b.GetReleased()
}
func (m *MessageWithPreviewField) ToBase() *golden.MessageWithPreviewField {
	msg := &golden.MessageWithPreviewField{
		Released: m.GetReleased(),
	}
	return msg
}
func (m *MessageWithPreviewField) FromBase(b *golden.MessageWithPreviewField) {
	m.Reset()
	m.Released = b.GetReleased()
}
func (m *MessageWithReleasedOneofItem) ToBase() *golden.MessageWithReleasedOneofItem {
	msg := &golden.MessageWithReleasedOneofItem{}
	switch o := m.GetOneofWithItem().(type) {
	case *MessageWithReleasedOneofItem_ReleasedOneofItem:
		msg.OneofWithItem = golden.MessageWithReleasedOneofItem_ReleasedOneofItem(o)
	}
	return msg
}
func (m *MessageWithReleasedOneofItem) FromBase(b *golden.MessageWithReleasedOneofItem) {
	m.Reset()
	switch o := b.GetOneofWithItem().(type) {
	case *golden.MessageWithReleasedOneofItem_ReleasedOneofItem:
		m.OneofWithItem = MessageWithReleasedOneofItem_ReleasedOneofItem(o)
	}
}
func (m *MessageNotAnnotated) ToBase() *golden.MessageNotAnnotated {
	msg := &golden.MessageNotAnnotated{
		Released:              m.GetReleased(),
		Previewed:             m.GetPreviewed(),
		PreviewedThenReleased: m.GetPreviewedThenReleased(),
		PreviewedThenRemoved:  m.GetPreviewedThenRemoved(),
		ReleasedThenRemoved:   m.GetReleasedThenRemoved(),
	}
	switch o := m.GetNotAnnotatedOneof().(type) {
	case *MessageNotAnnotated_OneofItemNotAnnotated:
		msg.NotAnnotatedOneof = golden.MessageNotAnnotated_OneofItemNotAnnotated(o)
	}
	return msg
}
func (m *MessageNotAnnotated) FromBase(b *golden.MessageNotAnnotated) {
	m.Reset()
	m.Released = b.GetReleased()
	m.Previewed = b.GetPreviewed()
	m.PreviewedThenReleased = b.GetPreviewedThenReleased()
	m.PreviewedThenRemoved = b.GetPreviewedThenRemoved()
	m.ReleasedThenRemoved = b.GetReleasedThenRemoved()
	switch o := b.GetNotAnnotatedOneof().(type) {
	case *golden.MessageNotAnnotated_OneofItemNotAnnotated:
		m.NotAnnotatedOneof = MessageNotAnnotated_OneofItemNotAnnotated(o)
	}
}

type BaseTestServiceServer struct {
	UnsafeTestServiceServer
	Base golden.TestServiceServer
}

func (s BaseTestServiceServer) EmptyMethodReleased(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	return s.Base.EmptyMethodReleased(ctx, in)
}
func (s BaseTestServiceServer) MethodReleased(ctx context.Context, in *MessageNotAnnotated) (*MessageNotAnnotated, error) {
	baseIn := in.ToBase()
	baseOut, err := s.Base.MethodReleased(ctx, baseIn)
	if err != nil {
		return nil, err
	}
	out := new(MessageNotAnnotated)
	out.FromBase(baseOut)
	return out, nil
}
