package main

import (
	"flag"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/known/emptypb"
)

func main() {
	baseImport := flag.String("base", "", "")
	protogen.Options{
		ParamFunc: flag.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f, protogen.GoImportPath(*baseImport))
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File, base protogen.GoImportPath) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_baseconvert.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-baseconvert. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, m := range file.Messages {
		baseMsg := g.QualifiedGoIdent(protogen.GoIdent{
			GoName:       m.GoIdent.GoName,
			GoImportPath: base,
		})
		g.P("func (m *", m.GoIdent.GoName, ") ToBase() *", baseMsg, " {")
		g.P("return &", baseMsg, "{")
		for _, f := range m.Fields {
			g.P(f.GoName, ": m.Get", f.GoName, "(),")
		}
		g.P("}")
		g.P("}")
		g.P("func (m *", m.GoIdent.GoName, ") FromBase(b *", baseMsg, ") {")
		g.P("m.Reset()")
		for _, f := range m.Fields {
			g.P("m.", f.GoName, " = b.Get", f.GoName, "()")
		}
		g.P("}")
	}

	emptyDesc := (&emptypb.Empty{}).ProtoReflect().Descriptor()
	for _, s := range file.Services {
		baseSrvIface := g.QualifiedGoIdent(protogen.GoIdent{
			GoName:       s.GoName + "Server",
			GoImportPath: base,
		})
		ctxType := g.QualifiedGoIdent(protogen.GoIdent{
			GoName:       "Context",
			GoImportPath: "context",
		})
		srvName := "Base" + s.GoName + "server"

		g.P("type ", srvName, " struct {")
		g.P("Unsafe", s.GoName, "Server")
		g.P("Base ", baseSrvIface)
		g.P("}")

		for _, m := range s.Methods {
			g.P("func (s ", srvName, ") ", m.GoName, "(ctx ", ctxType, ", in *", m.Input.GoIdent, ") (*", m.Output.GoIdent, ", error) {")
			inVar := "in"
			if m.Input.Desc.FullName() != emptyDesc.FullName() {
				g.P("baseIn := in.ToBase()")
				inVar = "baseIn"
			}
			if m.Output.Desc.FullName() == emptyDesc.FullName() {
				g.P("return s.Base.", m.GoName, "(ctx, ", inVar, ")")
				g.P("}")
				continue
			}
			g.P("baseOut, err := s.Base.", m.GoName, "(ctx, ", inVar, ")")
			g.P("if err != nil { return nil, err }")
			g.P("out := new(", m.Input.GoIdent, ")")
			g.P("out.FromBase(baseOut)")
			g.P("return out, nil")
			g.P("}")
		}
	}

	return g
}
