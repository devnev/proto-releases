package main

import (
	"flag"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	baseImport := flag.String("base", "", "")
	protogen.Options{
		ParamFunc: flag.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f, protogen.GoImportPath(*baseImport))
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File, base protogen.GoImportPath) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_baseconvert.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-baseconvert. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, m := range file.Messages {
		baseMsg := g.QualifiedGoIdent(protogen.GoIdent{
			GoName:       m.GoIdent.GoName,
			GoImportPath: base,
		})
		g.P("func (m *", m.GoIdent.GoName, ") ToBase() *", baseMsg, " {")
		g.P("return &", baseMsg, "{")
		for _, f := range m.Fields {
			g.P(f.GoName, ": m.Get", f.GoName, "(),")
		}
		g.P("}")
		g.P("}")
		g.P("func (m *", m.GoIdent.GoName, ") FromBase(b *", baseMsg, ") {")
		g.P("m.Reset()")
		for _, f := range m.Fields {
			g.P("m.", f.GoName, " = b.Get", f.GoName, "()")
		}
		g.P("}")
	}

	return g
}
