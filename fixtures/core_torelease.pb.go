// Code generated by protoc-gen-go-torelease. DO NOT EDIT.

package fixtures

import (
	proto_releases "github.com/devnev/proto-releases"
)

func (m *EmptyMessageNotAnnotated) ToRelease(c *proto_releases.Config) {
}
func (m *EmptyMessageReleased) ToRelease(c *proto_releases.Config) {
}
func (m *EmptyMessagePreviewed) ToRelease(c *proto_releases.Config) {
}
func (m *EmptyMessagePreviewedThenReleased) ToRelease(c *proto_releases.Config) {
}
func (m *EmptyMessagePreviewedThenRemoved) ToRelease(c *proto_releases.Config) {
}
func (m *EmptyMessageReleasedThenRemoved) ToRelease(c *proto_releases.Config) {
}
func (m *MessageWithNoAnnotations) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	m.NotAnnotated = 0
}
func (m *MessageWithReleasedField) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	if !(r >= 2) {
		m.Released = 0
	}
}
func (m *MessageWithPreviewField) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	if !(p && r >= 2) {
		m.Released = 0
	}
}
func (m *MessageWithUnannotatedOneof) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	m.NotAnnotatedOneof = nil
}
func (m *MessageWithReleasedOneofItem) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	m.OneofWithItem = toRelease_MessageWithReleasedOneofItem_OneofWithItem(m.OneofWithItem, c)
}
func toRelease_MessageWithReleasedOneofItem_OneofWithItem(o isMessageWithReleasedOneofItem_OneofWithItem, c *proto_releases.Config) isMessageWithReleasedOneofItem_OneofWithItem {
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	switch t := o.(type) {
	case *MessageWithReleasedOneofItem_OneofItemReleased:
		if r >= 2 {
			return t
		}
	}
	return nil
}
func (m *MessageWithOneofWithMessages) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	m.OneofWithMessage = toRelease_MessageWithOneofWithMessages_OneofWithMessage(m.OneofWithMessage, c)
}
func toRelease_MessageWithOneofWithMessages_OneofWithMessage(o isMessageWithOneofWithMessages_OneofWithMessage, c *proto_releases.Config) isMessageWithOneofWithMessages_OneofWithMessage {
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	switch t := o.(type) {
	case *MessageWithOneofWithMessages_MessageWithNoAnnotations:
		t.MessageWithNoAnnotations.ToRelease(c)
		return o
	case *MessageWithOneofWithMessages_MessageWithReleasedField:
		t.MessageWithReleasedField.ToRelease(c)
		return o
	case *MessageWithOneofWithMessages_MessageWithReleaseAnnotation:
		if r >= 2 {
			t.MessageWithReleaseAnnotation.ToRelease(c)
			return o
		}
	}
	return nil
}
func (m *MessageWithImportedFields) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	m.Empty.ToRelease(c)
	m.WithUnreleased.ToRelease(c)
	m.WithReleased.ToRelease(c)
}
func (m *MessageNotAnnotated) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	m.NotAnnotated = 0
	if !(r >= 2) {
		m.Released = 0
	}
	if !(p && r >= 2) {
		m.Previewed = 0
	}
	if !(r >= 3 || (p && r >= 2)) {
		m.PreviewedThenReleased = 0
	}
	if !(r < 3 && (p && r >= 2)) {
		m.PreviewedThenRemoved = 0
	}
	if !(r < 3 && (r >= 2)) {
		m.ReleasedThenRemoved = 0
	}
	m.NotAnnotatedOneof = toRelease_MessageNotAnnotated_NotAnnotatedOneof(m.NotAnnotatedOneof, c)
}
func toRelease_MessageNotAnnotated_NotAnnotatedOneof(o isMessageNotAnnotated_NotAnnotatedOneof, c *proto_releases.Config) isMessageNotAnnotated_NotAnnotatedOneof {
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	switch t := o.(type) {
	case *MessageNotAnnotated_OneofItemNotAnnotated:
		if r >= 2 {
			return t
		}
	}
	return nil
}
func (m *MessageWithEnumFields) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	m.NotAnnotated = 0
	if !(r >= 2) {
		m.Released = 0
	}
	m.Released = m.Released.ToRelease(c)
}
func (m *MessageWithOneofsWithEnumFields) ToRelease(c *proto_releases.Config) {
	if m == nil || c.GetRelease() == 0 {
		return
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	m.OneofWithEnumField = toRelease_MessageWithOneofsWithEnumFields_OneofWithEnumField(m.OneofWithEnumField, c)
}
func toRelease_MessageWithOneofsWithEnumFields_OneofWithEnumField(o isMessageWithOneofsWithEnumFields_OneofWithEnumField, c *proto_releases.Config) isMessageWithOneofsWithEnumFields_OneofWithEnumField {
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	switch t := o.(type) {
	case *MessageWithOneofsWithEnumFields_Released:
		if r >= 2 {
			t.Released = t.Released.ToRelease(c)
			return t
		}
	}
	return nil
}
func (e EnumNotAnnotated) ToRelease(c *proto_releases.Config) EnumNotAnnotated {
	if c.GetRelease() == 0 {
		return e
	}
	r, p := c.GetRelease(), c.GetPreview()
	_, _ = r, p // prevent unused variable
	switch e {
	case EnumNotAnnotated_released:
		if r >= 2 {
			return e
		}
	case EnumNotAnnotated_previewed:
		if p && r >= 2 {
			return e
		}
	case EnumNotAnnotated_previewed_then_released:
		if r >= 3 || (p && r >= 2) {
			return e
		}
	case EnumNotAnnotated_previewed_then_removed:
		if r < 3 && (p && r >= 2) {
			return e
		}
	case EnumNotAnnotated_released_then_removed:
		if r < 3 && (r >= 2) {
			return e
		}
	}
	return 0
}
