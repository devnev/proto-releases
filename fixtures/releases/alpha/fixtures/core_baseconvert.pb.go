// Code generated by protoc-gen-baseconvert. DO NOT EDIT.

package fixtures

import (
	context "context"
	fixtures "github.com/devnev/proto-releases/fixtures"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func (m *EmptyMessageNotAnnotated) ToBase() *fixtures.EmptyMessageNotAnnotated {
	msg := &fixtures.EmptyMessageNotAnnotated{}
	return msg
}
func (m *EmptyMessageNotAnnotated) FromBase(b *fixtures.EmptyMessageNotAnnotated) *EmptyMessageNotAnnotated {
	msg := &EmptyMessageNotAnnotated{}
	return msg
}
func (m *EmptyMessageReleased) ToBase() *fixtures.EmptyMessageReleased {
	msg := &fixtures.EmptyMessageReleased{}
	return msg
}
func (m *EmptyMessageReleased) FromBase(b *fixtures.EmptyMessageReleased) *EmptyMessageReleased {
	msg := &EmptyMessageReleased{}
	return msg
}
func (m *EmptyMessagePreviewed) ToBase() *fixtures.EmptyMessagePreviewed {
	msg := &fixtures.EmptyMessagePreviewed{}
	return msg
}
func (m *EmptyMessagePreviewed) FromBase(b *fixtures.EmptyMessagePreviewed) *EmptyMessagePreviewed {
	msg := &EmptyMessagePreviewed{}
	return msg
}
func (m *EmptyMessagePreviewedThenReleased) ToBase() *fixtures.EmptyMessagePreviewedThenReleased {
	msg := &fixtures.EmptyMessagePreviewedThenReleased{}
	return msg
}
func (m *EmptyMessagePreviewedThenReleased) FromBase(b *fixtures.EmptyMessagePreviewedThenReleased) *EmptyMessagePreviewedThenReleased {
	msg := &EmptyMessagePreviewedThenReleased{}
	return msg
}
func (m *EmptyMessagePreviewedThenRemoved) ToBase() *fixtures.EmptyMessagePreviewedThenRemoved {
	msg := &fixtures.EmptyMessagePreviewedThenRemoved{}
	return msg
}
func (m *EmptyMessagePreviewedThenRemoved) FromBase(b *fixtures.EmptyMessagePreviewedThenRemoved) *EmptyMessagePreviewedThenRemoved {
	msg := &EmptyMessagePreviewedThenRemoved{}
	return msg
}
func (m *EmptyMessageReleasedThenRemoved) ToBase() *fixtures.EmptyMessageReleasedThenRemoved {
	msg := &fixtures.EmptyMessageReleasedThenRemoved{}
	return msg
}
func (m *EmptyMessageReleasedThenRemoved) FromBase(b *fixtures.EmptyMessageReleasedThenRemoved) *EmptyMessageReleasedThenRemoved {
	msg := &EmptyMessageReleasedThenRemoved{}
	return msg
}
func (m *MessageWithNoAnnotations) ToBase() *fixtures.MessageWithNoAnnotations {
	msg := &fixtures.MessageWithNoAnnotations{
		NotAnnotated: m.GetNotAnnotated(),
	}
	return msg
}
func (m *MessageWithNoAnnotations) FromBase(b *fixtures.MessageWithNoAnnotations) *MessageWithNoAnnotations {
	msg := &MessageWithNoAnnotations{
		NotAnnotated: b.GetNotAnnotated(),
	}
	return msg
}
func (m *MessageWithReleasedField) ToBase() *fixtures.MessageWithReleasedField {
	msg := &fixtures.MessageWithReleasedField{
		Released: m.GetReleased(),
	}
	return msg
}
func (m *MessageWithReleasedField) FromBase(b *fixtures.MessageWithReleasedField) *MessageWithReleasedField {
	msg := &MessageWithReleasedField{
		Released: b.GetReleased(),
	}
	return msg
}
func (m *MessageWithPreviewField) ToBase() *fixtures.MessageWithPreviewField {
	msg := &fixtures.MessageWithPreviewField{
		Released: m.GetReleased(),
	}
	return msg
}
func (m *MessageWithPreviewField) FromBase(b *fixtures.MessageWithPreviewField) *MessageWithPreviewField {
	msg := &MessageWithPreviewField{
		Released: b.GetReleased(),
	}
	return msg
}
func (m *MessageWithUnannotatedOneof) ToBase() *fixtures.MessageWithUnannotatedOneof {
	msg := &fixtures.MessageWithUnannotatedOneof{}
	switch o := m.GetNotAnnotatedOneof().(type) {
	case *MessageWithUnannotatedOneof_OneofItemNotAnnotated:
		msg.NotAnnotatedOneof = o.ToBase()
	}
	return msg
}
func (m *MessageWithUnannotatedOneof) FromBase(b *fixtures.MessageWithUnannotatedOneof) *MessageWithUnannotatedOneof {
	msg := &MessageWithUnannotatedOneof{}
	switch o := b.GetNotAnnotatedOneof().(type) {
	case *fixtures.MessageWithUnannotatedOneof_OneofItemNotAnnotated:
		m.NotAnnotatedOneof = (*MessageWithUnannotatedOneof_OneofItemNotAnnotated)(nil).FromBase(o)
	}
	return msg
}
func (m *MessageWithUnannotatedOneof_OneofItemNotAnnotated) ToBase() *fixtures.MessageWithUnannotatedOneof_OneofItemNotAnnotated {
	return (*fixtures.MessageWithUnannotatedOneof_OneofItemNotAnnotated)(m)
}
func (m *MessageWithUnannotatedOneof_OneofItemNotAnnotated) FromBase(b *fixtures.MessageWithUnannotatedOneof_OneofItemNotAnnotated) *MessageWithUnannotatedOneof_OneofItemNotAnnotated {
	return (*MessageWithUnannotatedOneof_OneofItemNotAnnotated)(b)
}
func (m *MessageWithReleasedOneofItem) ToBase() *fixtures.MessageWithReleasedOneofItem {
	msg := &fixtures.MessageWithReleasedOneofItem{}
	switch o := m.GetOneofWithItem().(type) {
	case *MessageWithReleasedOneofItem_ReleasedOneofItem:
		msg.OneofWithItem = o.ToBase()
	}
	return msg
}
func (m *MessageWithReleasedOneofItem) FromBase(b *fixtures.MessageWithReleasedOneofItem) *MessageWithReleasedOneofItem {
	msg := &MessageWithReleasedOneofItem{}
	switch o := b.GetOneofWithItem().(type) {
	case *fixtures.MessageWithReleasedOneofItem_ReleasedOneofItem:
		m.OneofWithItem = (*MessageWithReleasedOneofItem_ReleasedOneofItem)(nil).FromBase(o)
	}
	return msg
}
func (m *MessageWithReleasedOneofItem_ReleasedOneofItem) ToBase() *fixtures.MessageWithReleasedOneofItem_ReleasedOneofItem {
	return (*fixtures.MessageWithReleasedOneofItem_ReleasedOneofItem)(m)
}
func (m *MessageWithReleasedOneofItem_ReleasedOneofItem) FromBase(b *fixtures.MessageWithReleasedOneofItem_ReleasedOneofItem) *MessageWithReleasedOneofItem_ReleasedOneofItem {
	return (*MessageWithReleasedOneofItem_ReleasedOneofItem)(b)
}
func (m *MessageWithOneofWithMessages) ToBase() *fixtures.MessageWithOneofWithMessages {
	msg := &fixtures.MessageWithOneofWithMessages{}
	switch o := m.GetOneofWithMessage().(type) {
	case *MessageWithOneofWithMessages_MessageWithNoAnnotations:
		msg.OneofWithMessage = o.ToBase()
	case *MessageWithOneofWithMessages_MessageWithReleasedField:
		msg.OneofWithMessage = o.ToBase()
	case *MessageWithOneofWithMessages_MessageWithReleaseAnnotation:
		msg.OneofWithMessage = o.ToBase()
	}
	return msg
}
func (m *MessageWithOneofWithMessages) FromBase(b *fixtures.MessageWithOneofWithMessages) *MessageWithOneofWithMessages {
	msg := &MessageWithOneofWithMessages{}
	switch o := b.GetOneofWithMessage().(type) {
	case *fixtures.MessageWithOneofWithMessages_MessageWithNoAnnotations:
		m.OneofWithMessage = (*MessageWithOneofWithMessages_MessageWithNoAnnotations)(nil).FromBase(o)
	case *fixtures.MessageWithOneofWithMessages_MessageWithReleasedField:
		m.OneofWithMessage = (*MessageWithOneofWithMessages_MessageWithReleasedField)(nil).FromBase(o)
	case *fixtures.MessageWithOneofWithMessages_MessageWithReleaseAnnotation:
		m.OneofWithMessage = (*MessageWithOneofWithMessages_MessageWithReleaseAnnotation)(nil).FromBase(o)
	}
	return msg
}
func (m *MessageWithOneofWithMessages_MessageWithNoAnnotations) ToBase() *fixtures.MessageWithOneofWithMessages_MessageWithNoAnnotations {
	return &fixtures.MessageWithOneofWithMessages_MessageWithNoAnnotations{
		MessageWithNoAnnotations: m.MessageWithNoAnnotations.ToBase(),
	}
}
func (m *MessageWithOneofWithMessages_MessageWithNoAnnotations) FromBase(b *fixtures.MessageWithOneofWithMessages_MessageWithNoAnnotations) *MessageWithOneofWithMessages_MessageWithNoAnnotations {
	return &MessageWithOneofWithMessages_MessageWithNoAnnotations{
		MessageWithNoAnnotations: (*MessageWithNoAnnotations)(nil).FromBase(b.MessageWithNoAnnotations),
	}
}
func (m *MessageWithOneofWithMessages_MessageWithReleasedField) ToBase() *fixtures.MessageWithOneofWithMessages_MessageWithReleasedField {
	return &fixtures.MessageWithOneofWithMessages_MessageWithReleasedField{
		MessageWithReleasedField: m.MessageWithReleasedField.ToBase(),
	}
}
func (m *MessageWithOneofWithMessages_MessageWithReleasedField) FromBase(b *fixtures.MessageWithOneofWithMessages_MessageWithReleasedField) *MessageWithOneofWithMessages_MessageWithReleasedField {
	return &MessageWithOneofWithMessages_MessageWithReleasedField{
		MessageWithReleasedField: (*MessageWithReleasedField)(nil).FromBase(b.MessageWithReleasedField),
	}
}
func (m *MessageWithOneofWithMessages_MessageWithReleaseAnnotation) ToBase() *fixtures.MessageWithOneofWithMessages_MessageWithReleaseAnnotation {
	return &fixtures.MessageWithOneofWithMessages_MessageWithReleaseAnnotation{
		MessageWithReleaseAnnotation: m.MessageWithReleaseAnnotation.ToBase(),
	}
}
func (m *MessageWithOneofWithMessages_MessageWithReleaseAnnotation) FromBase(b *fixtures.MessageWithOneofWithMessages_MessageWithReleaseAnnotation) *MessageWithOneofWithMessages_MessageWithReleaseAnnotation {
	return &MessageWithOneofWithMessages_MessageWithReleaseAnnotation{
		MessageWithReleaseAnnotation: (*MessageWithReleasedField)(nil).FromBase(b.MessageWithReleaseAnnotation),
	}
}
func (m *MessageWithImportedFields) ToBase() *fixtures.MessageWithImportedFields {
	msg := &fixtures.MessageWithImportedFields{
		Empty:          m.GetEmpty().ToBase(),
		WithUnreleased: m.GetWithUnreleased().ToBase(),
		WithReleased:   m.GetWithReleased().ToBase(),
	}
	return msg
}
func (m *MessageWithImportedFields) FromBase(b *fixtures.MessageWithImportedFields) *MessageWithImportedFields {
	msg := &MessageWithImportedFields{}
	msg.Empty = msg.Empty.FromBase(b.GetEmpty())
	msg.WithUnreleased = msg.WithUnreleased.FromBase(b.GetWithUnreleased())
	msg.WithReleased = msg.WithReleased.FromBase(b.GetWithReleased())
	return msg
}
func (m *MessageNotAnnotated) ToBase() *fixtures.MessageNotAnnotated {
	msg := &fixtures.MessageNotAnnotated{
		NotAnnotated:          m.GetNotAnnotated(),
		Released:              m.GetReleased(),
		Previewed:             m.GetPreviewed(),
		PreviewedThenReleased: m.GetPreviewedThenReleased(),
		PreviewedThenRemoved:  m.GetPreviewedThenRemoved(),
		ReleasedThenRemoved:   m.GetReleasedThenRemoved(),
	}
	switch o := m.GetNotAnnotatedOneof().(type) {
	case *MessageNotAnnotated_OneofItemNotAnnotated:
		msg.NotAnnotatedOneof = o.ToBase()
	}
	return msg
}
func (m *MessageNotAnnotated) FromBase(b *fixtures.MessageNotAnnotated) *MessageNotAnnotated {
	msg := &MessageNotAnnotated{
		NotAnnotated:          b.GetNotAnnotated(),
		Released:              b.GetReleased(),
		Previewed:             b.GetPreviewed(),
		PreviewedThenReleased: b.GetPreviewedThenReleased(),
		PreviewedThenRemoved:  b.GetPreviewedThenRemoved(),
		ReleasedThenRemoved:   b.GetReleasedThenRemoved(),
	}
	switch o := b.GetNotAnnotatedOneof().(type) {
	case *fixtures.MessageNotAnnotated_OneofItemNotAnnotated:
		m.NotAnnotatedOneof = (*MessageNotAnnotated_OneofItemNotAnnotated)(nil).FromBase(o)
	}
	return msg
}
func (m *MessageNotAnnotated_OneofItemNotAnnotated) ToBase() *fixtures.MessageNotAnnotated_OneofItemNotAnnotated {
	return (*fixtures.MessageNotAnnotated_OneofItemNotAnnotated)(m)
}
func (m *MessageNotAnnotated_OneofItemNotAnnotated) FromBase(b *fixtures.MessageNotAnnotated_OneofItemNotAnnotated) *MessageNotAnnotated_OneofItemNotAnnotated {
	return (*MessageNotAnnotated_OneofItemNotAnnotated)(b)
}

type BaseTestServiceServer struct {
	UnsafeTestServiceServer
	Base fixtures.TestServiceServer
}

func (s BaseTestServiceServer) EmptyMethodNotAnnotated(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	return s.Base.EmptyMethodNotAnnotated(ctx, in)
}
func (s BaseTestServiceServer) EmptyMethodReleased(ctx context.Context, in *emptypb.Empty) (*emptypb.Empty, error) {
	return s.Base.EmptyMethodReleased(ctx, in)
}
func (s BaseTestServiceServer) MethodNotAnnotated(ctx context.Context, in *MessageNotAnnotated) (*MessageNotAnnotated, error) {
	baseIn := in.ToBase()
	baseOut, err := s.Base.MethodNotAnnotated(ctx, baseIn)
	if err != nil {
		return nil, err
	}
	out := new(MessageNotAnnotated)
	out.FromBase(baseOut)
	return out, nil
}
func (s BaseTestServiceServer) MethodReleased(ctx context.Context, in *MessageNotAnnotated) (*MessageNotAnnotated, error) {
	baseIn := in.ToBase()
	baseOut, err := s.Base.MethodReleased(ctx, baseIn)
	if err != nil {
		return nil, err
	}
	out := new(MessageNotAnnotated)
	out.FromBase(baseOut)
	return out, nil
}
